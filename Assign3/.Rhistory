ph_e[i] <- length(mat[,i][mat[,i] == ext])/5 * ph_e[i]
}
ph_e <- ph_e/sum(ph_e)
ph_et <- rbind(ph_et,ph_e)
}
par(mfrow=c(2,3))
Extractions <- seq(from =0, to = e, by=1)
plot(Extractions,ph_et[,1], col="blue",type="l",lwd=2 , ylim=c(0,1) ,lty=1,main = "Box H0", ylab = "Probability")
plot(Extractions,ph_et[,2], col="black",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H1" , ylab = "Probability")
plot(Extractions,ph_et[,3], col="red",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H2", ylab = "Probability" )
plot(Extractions,ph_et[,4], col="darkgreen",type="l",lwd=2 , ylim=c(0,1),lty=1,main = "Box H3", ylab = "Probability")
plot(Extractions,ph_et[,5], col="orange",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H4", ylab = "Probability" )
plot(Extractions,ph_et[,6], col="brown",type="l",lwd=2 , ylim=c(0,1),lty=1,main = "Box H5", ylab = "Probability")
cat("Probabilities of each box at the",e,"th trial is\nH0 =",ph_et[e,1],"\nH1 =",ph_et[e,2],"\nH2 =",ph_et[e,3],"\nH3 =",ph_et[e,4],"\nH4 =",ph_et[e,5],"\nH5 =",ph_et[e,6])
mat <- cbind(c(1,1,1,1,1),c(1,1,1,1,0),c(1,1,1,0,0),c(1,1,0,0,0),c(1,0,0,0,0),c(0,0,0,0,0))
box <- sample(1:6,1)
ph_e <- c(1,1,1,1,1,1)/6
ph_et <- c(1,1,1,1,1,1)/6
cat("The real box tossed is H",box-1,"\n")
e <- 40
ex_balls <- c("N")
for (j in 1:e){
ball <- sample(1:5,1)
ext <- mat[ball,box]
if(ext == 1){
ex_balls <- append(ex_balls,"B")
}
else{
ex_balls <- append(ex_balls,"W")
}
for (i in 1:6){
ph_e[i] <- length(mat[,i][mat[,i] == ext])/5 * ph_e[i]
}
ph_e <- ph_e/sum(ph_e)
ph_et <- rbind(ph_et,ph_e)
}
par(mfrow=c(2,3))
Extractions <- seq(from =0, to = e, by=1)
plot(Extractions,ph_et[,1], col="blue",type="l",lwd=2 , ylim=c(0,1) ,lty=1,main = "Box H0", ylab = "Probability")
plot(Extractions,ph_et[,2], col="black",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H1" , ylab = "Probability")
plot(Extractions,ph_et[,3], col="red",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H2", ylab = "Probability" )
plot(Extractions,ph_et[,4], col="darkgreen",type="l",lwd=2 , ylim=c(0,1),lty=1,main = "Box H3", ylab = "Probability")
plot(Extractions,ph_et[,5], col="orange",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H4", ylab = "Probability" )
plot(Extractions,ph_et[,6], col="brown",type="l",lwd=2 , ylim=c(0,1),lty=1,main = "Box H5", ylab = "Probability")
cat("Probabilities of each box at the",e,"th trial is\nH0 =",ph_et[e,1],"\nH1 =",ph_et[e,2],"\nH2 =",ph_et[e,3],"\nH3 =",ph_et[e,4],"\nH4 =",ph_et[e,5],"\nH5 =",ph_et[e,6])
mat <- cbind(c(1,1,1,1,1),c(1,1,1,1,0),c(1,1,1,0,0),c(1,1,0,0,0),c(1,0,0,0,0),c(0,0,0,0,0))
box <- sample(1:6,1)
ph_e <- c(1,1,1,1,1,1)/6
ph_et <- c(1,1,1,1,1,1)/6
cat("The real box tossed is H",box-1,"\n")
e <- 40
ex_balls <- c("N")
for (j in 1:e){
ball <- sample(1:5,1)
ext <- mat[ball,box]
if(ext == 1){
ex_balls <- append(ex_balls,"B")
}
else{
ex_balls <- append(ex_balls,"W")
}
for (i in 1:6){
ph_e[i] <- length(mat[,i][mat[,i] == ext])/5 * ph_e[i]
}
ph_e <- ph_e/sum(ph_e)
ph_et <- rbind(ph_et,ph_e)
}
par(mfrow=c(2,3))
Extractions <- seq(from =0, to = e, by=1)
plot(Extractions,ph_et[,1], col="blue",type="l",lwd=2 , ylim=c(0,1) ,lty=1,main = "Box H0", ylab = "Probability")
plot(Extractions,ph_et[,2], col="black",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H1" , ylab = "Probability")
plot(Extractions,ph_et[,3], col="red",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H2", ylab = "Probability" )
plot(Extractions,ph_et[,4], col="darkgreen",type="l",lwd=2 , ylim=c(0,1),lty=1,main = "Box H3", ylab = "Probability")
plot(Extractions,ph_et[,5], col="orange",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H4", ylab = "Probability" )
plot(Extractions,ph_et[,6], col="brown",type="l",lwd=2 , ylim=c(0,1),lty=1,main = "Box H5", ylab = "Probability")
cat("Probabilities of each box at the",e,"th trial is\nH0 =",ph_et[e,1],"\nH1 =",ph_et[e,2],"\nH2 =",ph_et[e,3],"\nH3 =",ph_et[e,4],"\nH4 =",ph_et[e,5],"\nH5 =",ph_et[e,6])
mat <- cbind(c(1,1,1,1,1),c(1,1,1,1,0),c(1,1,1,0,0),c(1,1,0,0,0),c(1,0,0,0,0),c(0,0,0,0,0))
box <- sample(1:6,1)
ph_e <- c(1,1,1,1,1,1)/6
ph_et <- c(1,1,1,1,1,1)/6
cat("The real box tossed is H",box-1,"\n")
e <- 40
ex_balls <- c("N")
for (j in 1:e){
ball <- sample(1:5,1)
ext <- mat[ball,box]
if(ext == 1){
ex_balls <- append(ex_balls,"B")
}
else{
ex_balls <- append(ex_balls,"W")
}
for (i in 1:6){
ph_e[i] <- length(mat[,i][mat[,i] == ext])/5 * ph_e[i]
}
ph_e <- ph_e/sum(ph_e)
ph_et <- rbind(ph_et,ph_e)
}
par(mfrow=c(2,3))
Extractions <- seq(from =0, to = e, by=1)
plot(Extractions,ph_et[,1], col="blue",type="l",lwd=2 , ylim=c(0,1) ,lty=1,main = "Box H0", ylab = "Probability")
plot(Extractions,ph_et[,2], col="black",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H1" , ylab = "Probability")
plot(Extractions,ph_et[,3], col="red",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H2", ylab = "Probability" )
plot(Extractions,ph_et[,4], col="darkgreen",type="l",lwd=2 , ylim=c(0,1),lty=1,main = "Box H3", ylab = "Probability")
plot(Extractions,ph_et[,5], col="orange",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H4", ylab = "Probability" )
plot(Extractions,ph_et[,6], col="brown",type="l",lwd=2 , ylim=c(0,1),lty=1,main = "Box H5", ylab = "Probability")
cat("Probabilities of each box at the",e,"th trial is\nH0 =",ph_et[e,1],"\nH1 =",ph_et[e,2],"\nH2 =",ph_et[e,3],"\nH3 =",ph_et[e,4],"\nH4 =",ph_et[e,5],"\nH5 =",ph_et[e,6])
mat <- cbind(c(1,1,1,1,1),c(1,1,1,1,0),c(1,1,1,0,0),c(1,1,0,0,0),c(1,0,0,0,0),c(0,0,0,0,0))
box <- sample(1:6,1)
ph_e <- c(1,1,1,1,1,1)/6
ph_et <- c(1,1,1,1,1,1)/6
cat("The real box tossed is H",box-1,"\n")
e <- 40
ex_balls <- c("N")
for (j in 1:e){
ball <- sample(1:5,1)
ext <- mat[ball,box]
if(ext == 1){
ex_balls <- append(ex_balls,"B")
}
else{
ex_balls <- append(ex_balls,"W")
}
for (i in 1:6){
ph_e[i] <- length(mat[,i][mat[,i] == ext])/5 * ph_e[i]
}
ph_e <- ph_e/sum(ph_e)
ph_et <- rbind(ph_et,ph_e)
}
par(mfrow=c(2,3))
Extractions <- seq(from =0, to = e, by=1)
plot(Extractions,ph_et[,1], col="blue",type="l",lwd=2 , ylim=c(0,1) ,lty=1,main = "Box H0", ylab = "Probability")
plot(Extractions,ph_et[,2], col="black",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H1" , ylab = "Probability")
plot(Extractions,ph_et[,3], col="red",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H2", ylab = "Probability" )
plot(Extractions,ph_et[,4], col="darkgreen",type="l",lwd=2 , ylim=c(0,1),lty=1,main = "Box H3", ylab = "Probability")
plot(Extractions,ph_et[,5], col="orange",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H4", ylab = "Probability" )
plot(Extractions,ph_et[,6], col="brown",type="l",lwd=2 , ylim=c(0,1),lty=1,main = "Box H5", ylab = "Probability")
cat("Probabilities of each box at the",e,"th trial is\nH0 =",ph_et[e,1],"\nH1 =",ph_et[e,2],"\nH2 =",ph_et[e,3],"\nH3 =",ph_et[e,4],"\nH4 =",ph_et[e,5],"\nH5 =",ph_et[e,6])
mat <- cbind(c(1,1,1,1,1),c(1,1,1,1,0),c(1,1,1,0,0),c(1,1,0,0,0),c(1,0,0,0,0),c(0,0,0,0,0))
box <- sample(1:6,1)
ph_e <- c(1,1,1,1,1,1)/6
ph_et <- c(1,1,1,1,1,1)/6
cat("The real box tossed is H",box-1,"\n")
e <- 40
ex_balls <- c("N")
for (j in 1:e){
ball <- sample(1:5,1)
ext <- mat[ball,box]
if(ext == 1){
ex_balls <- append(ex_balls,"B")
}
else{
ex_balls <- append(ex_balls,"W")
}
for (i in 1:6){
ph_e[i] <- length(mat[,i][mat[,i] == ext])/5 * ph_e[i]
}
ph_e <- ph_e/sum(ph_e)
ph_et <- rbind(ph_et,ph_e)
}
par(mfrow=c(2,3))
Extractions <- seq(from =0, to = e, by=1)
plot(Extractions,ph_et[,1], col="blue",type="l",lwd=2 , ylim=c(0,1) ,lty=1,main = "Box H0", ylab = "Probability")
plot(Extractions,ph_et[,2], col="black",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H1" , ylab = "Probability")
plot(Extractions,ph_et[,3], col="red",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H2", ylab = "Probability" )
plot(Extractions,ph_et[,4], col="darkgreen",type="l",lwd=2 , ylim=c(0,1),lty=1,main = "Box H3", ylab = "Probability")
plot(Extractions,ph_et[,5], col="orange",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H4", ylab = "Probability" )
plot(Extractions,ph_et[,6], col="brown",type="l",lwd=2 , ylim=c(0,1),lty=1,main = "Box H5", ylab = "Probability")
cat("Probabilities of each box at the",e,"th trial is\nH0 =",ph_et[e,1],"\nH1 =",ph_et[e,2],"\nH2 =",ph_et[e,3],"\nH3 =",ph_et[e,4],"\nH4 =",ph_et[e,5],"\nH5 =",ph_et[e,6])
library(tidyverse)
df <- data.frame(round(ph_et,3))
Extraction <- seq(from=0, to=e, by=1)
df <- cbind(df, Extraction)
df <- cbind(df, ex_balls)
df <- rename(df,H0=X1,
H1=X2,
H2=X3,
H3=X4,
H4=X5,
H5=X6,
BALL=ex_balls)
print(df)
mat <- cbind(c(1,1,1,1,1),c(1,1,1,1,0),c(1,1,1,0,0),c(1,1,0,0,0),c(1,0,0,0,0),c(0,0,0,0,0))
box <- sample(1:6,1)
ph_e <- c(1,1,1,1,1,1)/6
ph_et <- c(1,1,1,1,1,1)/6
e <- 40
ex_balls <- c("N")
for (j in 1:e){
ball <- sample(1:5,1)
ext <- mat[ball,box]
if(ext == 1){
ex_balls <- append(ex_balls,"B")
}
else{
ex_balls <- append(ex_balls,"W")
}
for (i in 1:6){
ph_e[i] <- length(mat[,i][mat[,i] == ext])/5 * ph_e[i]
}
ph_e <- ph_e/sum(ph_e)
ph_et <- rbind(ph_et,ph_e)
}
par(mfrow=c(2,3))
Extractions <- seq(from =0, to = e, by=1)
plot(Extractions,ph_et[,1], col="blue",type="l",lwd=2 , ylim=c(0,1) ,lty=1,main = "Box H0", ylab = "Probability")
plot(Extractions,ph_et[,2], col="black",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H1" , ylab = "Probability")
plot(Extractions,ph_et[,3], col="red",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H2", ylab = "Probability" )
plot(Extractions,ph_et[,4], col="darkgreen",type="l",lwd=2 , ylim=c(0,1),lty=1,main = "Box H3", ylab = "Probability")
plot(Extractions,ph_et[,5], col="orange",type="l",lwd=2 , ylim=c(0,1),lty=1,main ="Box H4", ylab = "Probability" )
plot(Extractions,ph_et[,6], col="brown",type="l",lwd=2 , ylim=c(0,1),lty=1,main = "Box H5", ylab = "Probability")
cat("The real box tossed is H",box-1,"\n")
cat("Probabilities of each box at the",e,"th trial is\nH0 =",ph_et[e,1],"\nH1 =",ph_et[e,2],"\nH2 =",ph_et[e,3],"\nH3 =",ph_et[e,4],"\nH4 =",ph_et[e,5],"\nH5 =",ph_et[e,6])
library(tidyverse)
df <- data.frame(round(ph_et,3))
Extraction <- seq(from=0, to=e, by=1)
df <- cbind(df, Extraction)
df <- cbind(df, ex_balls)
df <- rename(df,H0=X1,
H1=X2,
H2=X3,
H3=X4,
H4=X5,
H5=X6,
BALL=ex_balls)
print(df)
w <- c(0.1,0.25,1,2,3)
xdat <- seq(from=-7*w, to=7*w, by=0.5*w)
conf <- function(x,delta,c){
p <- 0
j <- 0
low <- 0
high <- 0
Z = sum(x*delta)
for (i in x){
p <- p+i*delta/Z
if (p>=(1-c)/2){
low <- j
break
}
j <- j+1
}
p <- 0
j <- 0
for (i in x){
p <- p+i*delta/Z
if (p>=c+(1-c)/2){
high <- j
break
}
j <- j+1
}
return(c(low*delta,high*delta))
}
med <- function(x,delta){
p <- 0
j <- 0
m <- 0
Z = sum(x*delta)
for (i in x){
p <- p+i*delta/Z
if (p>=0.5){
m <- j
break
}
j <- j+1
}
return(m*delta)
}
PartFunc <- function(x,delta){
return(sum(x*1/delta))
}
library(bayestestR)
counts <- c(5, 8, 4, 6, 11, 6, 6, 5, 6, 4)
x <- seq(from = 0.2, to = 20, by = 0.2)
N <- (20-0.2)/0.2
Upost <- dgamma(x,shape = sum(counts)+1, scale = 1/length(counts))
Jpost <- dgamma(x,shape = sum(counts)+1/2, scale = 1/length(counts))
cat("The confidence interval for the posterior of the Unif prior is ",conf(Upost,0.2, 0.95),"\nThe mean is",sum(x*Upost*0.2),"the median is",med(Upost,0.2),"the variance is",sum(x*x*Upost*0.2)-sum(x*Upost*0.2)*sum(x*Upost*0.2),"\n")
cat("The confidence interval for the posterior of the Unif prior is ",conf(Jpost,0.2, 0.95),"\nThe mean is",sum(x*Jpost*0.2),"the median is",med(Jpost,0.2),"the variance is",sum(x*x*Jpost*0.2)-sum(x*Jpost*0.2)*sum(x*Jpost*0.2),"\n")
UGauss <- dnorm(x,mean= sum(x*Upost*0.2),sd= sum(x*x*Upost*0.2)-sum(x*Upost*0.2)*sum(x*Upost*0.2))
JGauss <- dnorm(x,mean= sum(x*Jpost*0.2),sd= sum(x*x*Jpost*0.2)-sum(x*Jpost*0.2)*sum(x*Jpost*0.2))
plot(x,UGauss, col="red",type="l",lwd=2 ,lty=1, xlim= c(2,10))
abline(v=conf(UGauss,0.2, 0.95), col=c("red", "red"), lty=c(2,2), lwd=c(2, 2))
lines(x,Jpost, col="blue",lty=3,lwd=2)
abline(v=conf(Jpost,0.2, 0.95), col=c("blue", "blue"), lty=c(3,3), lwd=c(2, 2))
lines(x,JGauss, col="darkgreen",lty=3,lwd=2)
abline(v=conf(JGauss,0.2, 0.95), col=c("darkgreen", "darkgreen"), lty=c(2,2), lwd=c(2, 2))
lines(x,Upost, col="black",lty=3,lwd=2)
abline(v=conf(Upost,0.2, 0.95), col=c("black", "black"), lty=c(2,2), lwd=c(2, 2))
p.log.like <- function(a,b,data){
LogL <- 0.0
for (x in data){
LogL <- LogL + log( b/(b^2 + (x-a)^2))
}
return(LogL)
}
evol <- function(alpha,beta,data){
for (i in 1:length(beta)){
if (i==1){
loglike <- p.log.like(alpha,beta[i],data)
}
else{
loglike <- rbind(loglike,p.log.like(alpha,beta[i],data))
}
}
post <- exp(loglike)/(sum(0.2*0.2*exp(loglike)))
alpha.max.index <- which(post == max(post), arr.ind = TRUE)[2]
beta.max.index <- which(post == max(post), arr.ind = TRUE)[1]
contour(beta, alpha, post,nlevels = 5,lwd = 1, xlab="beta", ylab="alpha", main = paste("Data size:",length(data) ) )
abline(v=beta_real,h=alpha_real,col="grey")
}
alpha_real <- 1
beta_real <- 2
data <- c()
for (i in 1:200){
y <- runif(1,0,2*3.1415)
data <- append(data, beta_real*tan(y)+alpha_real )
}
plot(data,seq(1,length(data),1))
alpha <- seq(from =-10, to= 5, by=0.2)
beta <- seq(from =0.1, to=10.1 , by=0.2)
ndata <- c(1,2,5,10,50,100,150,200)
par(mfrow=c(2,4))
for (i in ndata){
evol(alpha,beta,data[1:i])
}
par(mfrow=c(1,1))
evol(alpha,beta,data[1:length(data)])
w <- c(0.1,0.25,1,2,3)
xdat <- seq(from=-7*w, to=7*w, by=0.5*w)
signal <- function(x, a, b, x0, w, t){
t * (a*exp(-(x-x0)^2/(2*w^2)) + b)
}
# Define model parameters
x0 <- 0
w_list <- c(0.1,0.25,1,2,3)
A.true <- 1
B.true <- 2
Delta.t <- 5
set.seed(205)
for(w in w_list){
xdat <- seq(from=-7*w, to=7*w, by=0.5*w)
s.true <- signal(xdat, A.true, B.true, x0, w, Delta.t)
ddat <- rpois(length(s.true), s.true)
xplot <- seq(from=min(xdat), to=max(xdat), by=0.05*w)
splot <- signal(xplot, A.true, B.true, x0, w, Delta.t)
plot(xplot, splot, xlab="x", ylab="Signal+Background counts")
par(new=TRUE)
xdat.off <- xdat-0.25*w
lines(xdat.off, ddat, type="s",col="firebrick3",lwd=2,xlim=range(xplot), ylim=range(c(splot,       ddat)))
# - Sampling grid for computing posterior
alim <- c(0.0, 4.0)
blim <- c(0.5, 3)
Nsamp <- 100
uniGrid <- seq(from=1/(2*Nsamp), to=1-1/(2*Nsamp), by=1/Nsamp)
delta_a <- diff(alim)/Nsamp
delta_b <- diff(blim)/Nsamp
a <- alim[1] + diff(alim)*uniGrid
b <- blim[1] + diff(blim)*uniGrid
# Log posterior
log.post <- function(d, x, a, b, x0, w, t) {
if(a<0 || b <0) {return(-Inf)} # the effect of the prior
sum(dpois(d, lambda=signal(x, a, b, x0, w, t), log=TRUE))
}
# Compute log unnormalized posterior, z = ln Pˆ*(a,b|D), on a regular grid
z <- matrix(data=NA, nrow=length(a), ncol=length(b))
for(j in 1:length(a)) {
for(k in 1:length(b)) {
z[j,k] <- log.post(ddat, xdat, a[j], b[k], x0, w, Delta.t)
} }
z <- z - max(z) # set maximum to zero
# Plot unnormalized 2D posterior as contours.
contour(a, b, exp(z), nlevels = 5, labcex = 0.5, lwd = 2, xlab="amplitude A", ylab="background      B")
abline(v=A.true,h=B.true,col="grey")
}
signal <- function(x, a, b, x0, w, t){
t * (a*exp(-(x-x0)^2/(2*w^2)) + b)
}
# Define model parameters
x0 <- 0
w_list <- c(0.1,0.25,1,2,3)
A.true <- 1
B.true <- 2
Delta.t <- 5
set.seed(205)
for(w in w_list){
xdat <- seq(from=-7*w, to=7*w, by=0.5*w)
s.true <- signal(xdat, A.true, B.true, x0, w, Delta.t)
ddat <- rpois(length(s.true), s.true)
xplot <- seq(from=min(xdat), to=max(xdat), by=0.05*w)
splot <- signal(xplot, A.true, B.true, x0, w, Delta.t)
plot(xplot, splot, xlab="x", ylab="Signal+Background counts")
par(new=TRUE)
xdat.off <- xdat-0.25*w
lines(xdat, ddat, type="s",col="firebrick3",lwd=2,xlim=range(xplot), ylim=range(c(splot,       ddat)))
# - Sampling grid for computing posterior
alim <- c(0.0, 4.0)
blim <- c(0.5, 3)
Nsamp <- 100
uniGrid <- seq(from=1/(2*Nsamp), to=1-1/(2*Nsamp), by=1/Nsamp)
delta_a <- diff(alim)/Nsamp
delta_b <- diff(blim)/Nsamp
a <- alim[1] + diff(alim)*uniGrid
b <- blim[1] + diff(blim)*uniGrid
# Log posterior
log.post <- function(d, x, a, b, x0, w, t) {
if(a<0 || b <0) {return(-Inf)} # the effect of the prior
sum(dpois(d, lambda=signal(x, a, b, x0, w, t), log=TRUE))
}
# Compute log unnormalized posterior, z = ln Pˆ*(a,b|D), on a regular grid
z <- matrix(data=NA, nrow=length(a), ncol=length(b))
for(j in 1:length(a)) {
for(k in 1:length(b)) {
z[j,k] <- log.post(ddat, xdat, a[j], b[k], x0, w, Delta.t)
} }
z <- z - max(z) # set maximum to zero
# Plot unnormalized 2D posterior as contours.
contour(a, b, exp(z), nlevels = 5, labcex = 0.5, lwd = 2, xlab="amplitude A", ylab="background      B")
abline(v=A.true,h=B.true,col="grey")
}
signal <- function(x, a, b, x0, w, t){
t * (a*exp(-(x-x0)^2/(2*w^2)) + b)
}
# Define model parameters
x0 <- 0
w_list <- c(0.1,0.25,1,2,3)
A.true <- 1
B.true <- 2
Delta.t <- 5
set.seed(205)
for(w in w_list){
xdat <- seq(from=-7*w, to=7*w, by=0.5*w)
s.true <- signal(xdat, A.true, B.true, x0, w, Delta.t)
ddat <- rpois(length(s.true), s.true)
xplot <- seq(from=min(xdat), to=max(xdat), by=0.05*w)
splot <- signal(xplot, A.true, B.true, x0, w, Delta.t)
plot(xplot, splot, xlab="x", ylab="Signal+Background counts")
par(new=TRUE)
xdat.off <- xdat-0.25*w
lines(xdat.off, ddat, type="s",col="firebrick3",lwd=2,xlim=range(xplot))
# - Sampling grid for computing posterior
alim <- c(0.0, 4.0)
blim <- c(0.5, 3)
Nsamp <- 100
uniGrid <- seq(from=1/(2*Nsamp), to=1-1/(2*Nsamp), by=1/Nsamp)
delta_a <- diff(alim)/Nsamp
delta_b <- diff(blim)/Nsamp
a <- alim[1] + diff(alim)*uniGrid
b <- blim[1] + diff(blim)*uniGrid
# Log posterior
log.post <- function(d, x, a, b, x0, w, t) {
if(a<0 || b <0) {return(-Inf)} # the effect of the prior
sum(dpois(d, lambda=signal(x, a, b, x0, w, t), log=TRUE))
}
# Compute log unnormalized posterior, z = ln Pˆ*(a,b|D), on a regular grid
z <- matrix(data=NA, nrow=length(a), ncol=length(b))
for(j in 1:length(a)) {
for(k in 1:length(b)) {
z[j,k] <- log.post(ddat, xdat, a[j], b[k], x0, w, Delta.t)
} }
z <- z - max(z) # set maximum to zero
# Plot unnormalized 2D posterior as contours.
contour(a, b, exp(z), nlevels = 5, labcex = 0.5, lwd = 2, xlab="amplitude A", ylab="background      B")
abline(v=A.true,h=B.true,col="grey")
}
lines(xdat.off, ddat, type="s",col="firebrick3",lwd=2)
signal <- function(x, a, b, x0, w, t){
t * (a*exp(-(x-x0)^2/(2*w^2)) + b)
}
# Define model parameters
x0 <- 0
w_list <- c(0.1,0.25,1,2,3)
A.true <- 1
B.true <- 2
Delta.t <- 5
set.seed(205)
for(w in w_list){
xdat <- seq(from=-7*w, to=7*w, by=0.5*w)
s.true <- signal(xdat, A.true, B.true, x0, w, Delta.t)
ddat <- rpois(length(s.true), s.true)
xplot <- seq(from=min(xdat), to=max(xdat), by=0.05*w)
splot <- signal(xplot, A.true, B.true, x0, w, Delta.t)
plot(xplot, splot, xlab="x", ylab="Signal+Background counts")
par(new=TRUE)
xdat.off <- xdat-0.25*w
lines(xdat.off, ddat, type="s",col="firebrick3",lwd=2)
# - Sampling grid for computing posterior
alim <- c(0.0, 4.0)
blim <- c(0.5, 3)
Nsamp <- 100
uniGrid <- seq(from=1/(2*Nsamp), to=1-1/(2*Nsamp), by=1/Nsamp)
delta_a <- diff(alim)/Nsamp
delta_b <- diff(blim)/Nsamp
a <- alim[1] + diff(alim)*uniGrid
b <- blim[1] + diff(blim)*uniGrid
# Log posterior
log.post <- function(d, x, a, b, x0, w, t) {
if(a<0 || b <0) {return(-Inf)} # the effect of the prior
sum(dpois(d, lambda=signal(x, a, b, x0, w, t), log=TRUE))
}
# Compute log unnormalized posterior, z = ln Pˆ*(a,b|D), on a regular grid
z <- matrix(data=NA, nrow=length(a), ncol=length(b))
for(j in 1:length(a)) {
for(k in 1:length(b)) {
z[j,k] <- log.post(ddat, xdat, a[j], b[k], x0, w, Delta.t)
} }
z <- z - max(z) # set maximum to zero
# Plot unnormalized 2D posterior as contours.
contour(a, b, exp(z), nlevels = 5, labcex = 0.5, lwd = 2, xlab="amplitude A", ylab="background      B")
abline(v=A.true,h=B.true,col="grey")
}
