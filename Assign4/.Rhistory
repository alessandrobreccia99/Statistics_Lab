}
}
else if(tail=="higher"){
p <- 0
j <- 0
val <- 0
val <- 0
Z = sum(x*delta)
for (i in x){
p <- p+i*delta/Z
if (p>=c){
val <- j
break
}
j <- j+1
}
}
return(val*delta)
}
N <- 10000
prob <- seq(from =0.1, to =N, by=1)/N
n <- 75
r <- 6
fe <- r/n
beta_mean <- 0.15
beta_std <- 0.14
Bprior <- dbeta(prob, shape1 = Betapar(beta_mean,beta_std*beta_std)[1], shape2 = Betapar(beta_mean,beta_std*beta_std)[2])
like <- dbinom(x=r, size=n, prob)
Zb <- PartFunc(like*Bprior, 1/N)
Bpost <- like*Bprior/Zb
Bfirst <- sum(prob*Bpost*1/N)
Bsecond <- sum(prob*prob*Bpost*1/N)
plot(prob,Bpost,col="black",type="l",lwd=2 ,lty=1, xlim=c(0,0.5),xlab = "Probability",ylab = "Probability Density")
abline(v=c(Bfirst,Bfirst-sqrt(Bsecond-Bfirst*Bfirst),Bfirst+sqrt(Bsecond-Bfirst*Bfirst)), col=c("blue","red", "red"), lty=c(1,2,2), lwd=c(2, 1, 1))
Betapar <- function(mean, var) {
shape1 <- ((1 - mean) / var - 1 / mean) * mean ^ 2
shape2 <- shape1 * (1 / mean - 1)
return(c(shape1,shape2))
}
PartFunc <- function(x,delta){
return(sum(x*1/10000))
}
conf_tails <- function(x,delta,c,tail) {
if(tail=="lower"){
p <- 0
j <- 0
val <- 0
val <- 0
Z = sum(x*delta)
for (i in x){
p <- p+i*delta/Z
if (p>=(1-c)){
val <- j
break
}
j <- j+1
}
}
else if(tail=="higher"){
p <- 0
j <- 0
val <- 0
val <- 0
Z = sum(x*delta)
for (i in x){
p <- p+i*delta/Z
if (p>=c){
val <- j
break
}
j <- j+1
}
}
return(val*delta)
}
N <- 10000
prob <- seq(from =0.1, to =N, by=1)/N
n <- 75
r <- 6
fe <- r/n
beta_mean <- 0.15
beta_std <- 0.14
Bprior <- dbeta(prob, shape1 = Betapar(beta_mean,beta_std*beta_std)[1], shape2 = Betapar(beta_mean,beta_std*beta_std)[2])
like <- dbinom(x=r, size=n, prob)
Zb <- PartFunc(like*Bprior, 1/N)
Bpost <- like*Bprior/Zb
Bfirst <- sum(prob*Bpost*1/N)
Bsecond <- sum(prob*prob*Bpost*1/N)
plot(prob,Bpost,col="black",type="l",lwd=2 ,lty=1, xlim=c(0,0.5),xlab = "Probability",ylab = "Probability Density")
abline(v=c(Bfirst,Bfirst-sqrt(Bsecond-Bfirst*Bfirst),Bfirst+sqrt(Bsecond-Bfirst*Bfirst)), col=c("blue","red", "red"), lty=c(1,2,2), lwd=c(2, 1, 1))
real_freq <- dbinom(x=6, size=75, prob)
low_val_freq <- conf_tails(real_freq,1/N,0.95,"higher")
print(conf_tails(real_freq,1/N,0.95,"higher"))
plot(prob,real_freq,col="orange",type="l",lwd=2 ,lty=1, xlim = c(0,0.3))
abline(v=low_val_freq, col="orange", lty=2, lwd= 1)
abline(v=0.15, col="blue", lty=3, lwd= 1)
real_freq <- dbinom(x=6, size=75, prob)
low_val_freq <- conf_tails(real_freq,1/N,0.95,"higher")
print(conf_tails(real_freq,1/N,0.95,"higher"))
plot(prob,real_freq,col="orange",type="l",lwd=2 ,lty=1, xlim = c(0,0.2))
abline(v=low_val_freq, col="orange", lty=2, lwd= 1)
abline(v=0.15, col="blue", lty=3, lwd= 1)
real_freq <- dbinom(x=6, size=75, prob)
low_val_freq <- conf_tails(real_freq,1/N,0.95,"higher")
print(conf_tails(real_freq,1/N,0.95,"higher"))
plot(prob,real_freq,col="orange",type="l",lwd=2 ,lty=1, xlim = c(0,0.3))
abline(v=low_val_freq, col="orange", lty=2, lwd= 1)
abline(v=0.15, col="blue", lty=3, lwd= 1)
real_freq <- dbinom(x=6, size=75, prob)
low_val_freq <- conf_tails(real_freq,1/N,0.94,"higher")
print(conf_tails(real_freq,1/N,0.95,"higher"))
plot(prob,real_freq,col="orange",type="l",lwd=2 ,lty=1, xlim = c(0,0.3))
abline(v=low_val_freq, col="orange", lty=2, lwd= 1)
abline(v=0.15, col="blue", lty=3, lwd= 1)
Betapar <- function(mean, var) {
shape1 <- ((1 - mean) / var - 1 / mean) * mean ^ 2
shape2 <- shape1 * (1 / mean - 1)
return(c(shape1,shape2))
}
PartFunc <- function(x,delta){
return(sum(x*1/10000))
}
conf_tails <- function(x,delta,c,tail) {
if(tail=="lower"){
p <- 0
j <- 0
val <- 0
val <- 0
Z = sum(x*delta)
for (i in x){
p <- p+i*delta/Z
if (p>=(1-c)){
val <- j
break
}
j <- j+1
}
}
else if(tail=="higher"){
p <- 0
j <- 0
val <- 0
val <- 0
Z = sum(x*delta)
for (i in x){
p <- p+i*delta/Z
if (p>=c){
val <- j
break
}
j <- j+1
}
}
return(val*delta)
}
N <- 10000
prob <- seq(from =0.1, to =N, by=1)/N
n <- 75
r <- 6
fe <- r/n
beta_mean <- 0.15
beta_std <- 0.14
Bprior <- dbeta(prob, shape1 = Betapar(beta_mean,beta_std*beta_std)[1], shape2 = Betapar(beta_mean,beta_std*beta_std)[2])
like <- dbinom(x=r, size=n, prob)
Zb <- PartFunc(like*Bprior, 1/N)
Bpost <- like*Bprior/Zb
Bfirst <- sum(prob*Bpost*1/N)
Bsecond <- sum(prob*prob*Bpost*1/N)
plot(prob,Bpost,col="black",type="l",lwd=2 ,lty=1, xlim=c(0,0.5),xlab = "Probability",ylab = "Probability Density")
abline(v=c(Bfirst,Bfirst-sqrt(Bsecond-Bfirst*Bfirst),Bfirst+sqrt(Bsecond-Bfirst*Bfirst),conf_tails(Bpost,1/N,0.95,"higher")), col=c("blue","red", "red","darkgreen"), lty=c(1,2,2,3), lwd=c(2, 1, 1,1))
lines()
Betapar <- function(mean, var) {
shape1 <- ((1 - mean) / var - 1 / mean) * mean ^ 2
shape2 <- shape1 * (1 / mean - 1)
return(c(shape1,shape2))
}
PartFunc <- function(x,delta){
return(sum(x*1/10000))
}
conf_tails <- function(x,delta,c,tail) {
if(tail=="lower"){
p <- 0
j <- 0
val <- 0
val <- 0
Z = sum(x*delta)
for (i in x){
p <- p+i*delta/Z
if (p>=(1-c)){
val <- j
break
}
j <- j+1
}
}
else if(tail=="higher"){
p <- 0
j <- 0
val <- 0
val <- 0
Z = sum(x*delta)
for (i in x){
p <- p+i*delta/Z
if (p>=c){
val <- j
break
}
j <- j+1
}
}
return(val*delta)
}
N <- 10000
prob <- seq(from =0.1, to =N, by=1)/N
n <- 75
r <- 6
fe <- r/n
beta_mean <- 0.15
beta_std <- 0.14
Bprior <- dbeta(prob, shape1 = Betapar(beta_mean,beta_std*beta_std)[1], shape2 = Betapar(beta_mean,beta_std*beta_std)[2])
like <- dbinom(x=r, size=n, prob)
Zb <- PartFunc(like*Bprior, 1/N)
Bpost <- like*Bprior/Zb
Bfirst <- sum(prob*Bpost*1/N)
Bsecond <- sum(prob*prob*Bpost*1/N)
plot(prob,Bpost,col="black",type="l",lwd=2 ,lty=1, xlim=c(0,0.5),xlab = "Probability",ylab = "Probability Density")
abline(v=c(Bfirst,Bfirst-sqrt(Bsecond-Bfirst*Bfirst),Bfirst+sqrt(Bsecond-Bfirst*Bfirst),conf_tails(Bpost,1/N,0.95,"higher")), col=c("blue","red", "red","darkgreen"), lty=c(1,2,2,3), lwd=c(2, 1, 1,1))
print(conf_tails(Bpost,1/N,0.95,"higher"))
real_freq <- dbinom(x=6, size=75, prob)
low_val_freq <- conf_tails(real_freq,1/N,0.95,"higher")
print(conf_tails(real_freq,1/N,0.95,"higher"))
plot(prob,real_freq,col="orange",type="l",lwd=2 ,lty=1, xlim = c(0,0.3))
abline(v=low_val_freq, col="orange", lty=2, lwd= 1)
abline(v=0.15, col="blue", lty=3, lwd= 1)
Betapar <- function(mean, var) {
shape1 <- ((1 - mean) / var - 1 / mean) * mean ^ 2
shape2 <- shape1 * (1 / mean - 1)
return(c(shape1,shape2))
}
PartFunc <- function(x,delta){
return(sum(x*1/10000))
}
conf_tails <- function(x,delta,c,tail) {
if(tail=="lower"){
p <- 0
j <- 0
val <- 0
val <- 0
Z = sum(x*delta)
for (i in x){
p <- p+i*delta/Z
if (p>=(1-c)){
val <- j
break
}
j <- j+1
}
}
else if(tail=="higher"){
p <- 0
j <- 0
val <- 0
val <- 0
Z = sum(x*delta)
for (i in x){
p <- p+i*delta/Z
if (p>=c){
val <- j
break
}
j <- j+1
}
}
return(val*delta)
}
N <- 10000
prob <- seq(from =0.1, to =N, by=1)/N
n <- 75
r <- 6
fe <- r/n
beta_mean <- 0.15
beta_std <- 0.14
Bprior <- dbeta(prob, shape1 = Betapar(beta_mean,beta_std*beta_std)[1], shape2 = Betapar(beta_mean,beta_std*beta_std)[2])
like <- dbinom(x=r, size=n, prob)
Zb <- PartFunc(like*Bprior, 1/N)
Bpost <- like*Bprior/Zb
Bfirst <- sum(prob*Bpost*1/N)
Bsecond <- sum(prob*prob*Bpost*1/N)
plot(prob,Bpost,col="black",type="l",lwd=2 ,lty=1, xlim=c(0,0.5),xlab = "Probability",ylab = "Probability Density")
abline(v=c(Bfirst,Bfirst-sqrt(Bsecond-Bfirst*Bfirst),Bfirst+sqrt(Bsecond-Bfirst*Bfirst),conf_tails(Bpost,1/N,0.95,"higher")), col=c("blue","red", "red","darkgreen"), lty=c(1,2,2,3), lwd=c(2, 1, 1,1))
print(conf_tails(Bpost,1/N,0.95,"higher"))
alpha_real <- 1
beta_real <- 2
data <- c()
for (i in 1:200){
y <- runif(1,0,2*3.1415)
data <- append(data, beta_real*tan(y)+alpha_real )
}
plot(data,seq(1,length(data),1))
alpha <- seq(from =-10, to= 5, by=0.2)
beta <- seq(from =0.1, to=10.1 , by=0.2)
ndata <- c(1,2,3,10,50,100,150,200)
par(mfrow=c(2,4))
for (i in ndata){
evol(alpha,beta,data[1:i])
}
p.log.like <- function(a,b,data){
LogL <- 0.0
for (x in data){
LogL <- LogL + log( b/(b^2 + (x-a)^2))
}
return(LogL)
}
evol <- function(alpha,beta,data){
for (i in 1:length(beta)){
if (i==1){
loglike <- p.log.like(alpha,beta[i],data)
}
else{
loglike <- rbind(loglike,p.log.like(alpha,beta[i],data))
}
}
post <- exp(loglike)/(sum(0.2*0.2*exp(loglike)))
alpha.max.index <- which(post == max(post), arr.ind = TRUE)[2]
beta.max.index <- which(post == max(post), arr.ind = TRUE)[1]
contour(beta, alpha, post,nlevels = 5,lwd = 1, xlab="beta", ylab="alpha", main = paste("Data size:",length(data) ) )
abline(v=beta_real,h=alpha_real,col="grey")
}
alpha_real <- 1
beta_real <- 2
data <- c()
for (i in 1:200){
y <- runif(1,0,2*3.1415)
data <- append(data, beta_real*tan(y)+alpha_real )
}
plot(data,seq(1,length(data),1))
alpha <- seq(from =-10, to= 5, by=0.2)
beta <- seq(from =0.1, to=10.1 , by=0.2)
ndata <- c(1,2,3,10,50,100,150,200)
par(mfrow=c(2,4))
for (i in ndata){
evol(alpha,beta,data[1:i])
}
par(mfrow=c(1,1))
evol(alpha,beta,data[1:length(data)])
alpha_real <- 1
beta_real <- 2
data <- c()
for (i in 1:200){
y <- runif(1,0,2*3.1415)
data <- append(data, beta_real*tan(y)+alpha_real )
}
plot(data,seq(1,length(data),1))
alpha <- seq(from =-10, to= 5, by=0.2)
beta <- seq(from =0.1, to=10.1 , by=0.2)
ndata <- c(1,2,3,10,50,100,150,200)
par(mfrow=c(2,4))
for (i in ndata){
evol(alpha,beta,data[1:i])
}
par(mfrow=c(1,1))
evol(alpha,beta,data[1:length(data)])
alpha_real <- 1
beta_real <- 2
data <- c()
for (i in 1:200){
y <- runif(1,0,2*3.1415)
data <- append(data, beta_real*tan(y)+alpha_real )
}
plot(data,seq(1,length(data),1))
alpha <- seq(from =-10, to= 5, by=0.2)
beta <- seq(from =0.1, to=10.1 , by=0.2)
ndata <- c(1,2,3,10,50,100,150,200)
par(mfrow=c(2,4))
for (i in ndata){
evol(alpha,beta,data[1:i])
}
par(mfrow=c(1,1))
evol(alpha,beta,data[1:length(data)])
alpha_real <- 1
beta_real <- 2
data <- c()
for (i in 1:200){
y <- runif(1,0,2*3.1415)
data <- append(data, beta_real*tan(y)+alpha_real )
}
plot(data,seq(1,length(data),1))
alpha <- seq(from =-10, to= 5, by=0.2)
beta <- seq(from =0.1, to=10.1 , by=0.2)
ndata <- c(1,2,3,10,50,100,150,200)
par(mfrow=c(2,4))
for (i in ndata){
evol(alpha,beta,data[1:i])
}
par(mfrow=c(1,1))
evol(alpha,beta,data[1:length(data)])
print(Betapar(beta_mean,beta_std*beta_std))
Betapar <- function(mean, var) {
shape1 <- ((1 - mean) / var - 1 / mean) * mean ^ 2
shape2 <- shape1 * (1 / mean - 1)
return(c(shape1,shape2))
}
PartFunc <- function(x,delta){
return(sum(x*1/10000))
}
conf_tails <- function(x,delta,c,tail) {
if(tail=="lower"){
p <- 0
j <- 0
val <- 0
val <- 0
Z = sum(x*delta)
for (i in x){
p <- p+i*delta/Z
if (p>=(1-c)){
val <- j
break
}
j <- j+1
}
}
else if(tail=="higher"){
p <- 0
j <- 0
val <- 0
val <- 0
Z = sum(x*delta)
for (i in x){
p <- p+i*delta/Z
if (p>=c){
val <- j
break
}
j <- j+1
}
}
return(val*delta)
}
N <- 10000
prob <- seq(from =0.1, to =N, by=1)/N
n <- 75
r <- 6
fe <- r/n
beta_mean <- 0.15
beta_std <- 0.14
Bprior <- dbeta(prob, shape1 = Betapar(beta_mean,beta_std*beta_std)[1], shape2 = Betapar(beta_mean,beta_std*beta_std)[2])
like <- dbinom(x=r, size=n, prob)
Zb <- PartFunc(like*Bprior, 1/N)
Bpost <- like*Bprior/Zb
Bfirst <- sum(prob*Bpost*1/N)
Bsecond <- sum(prob*prob*Bpost*1/N)
plot(prob,Bpost,col="black",type="l",lwd=2 ,lty=1, xlim=c(0,0.5),xlab = "Probability",ylab = "Probability Density")
abline(v=c(Bfirst,Bfirst-sqrt(Bsecond-Bfirst*Bfirst),Bfirst+sqrt(Bsecond-Bfirst*Bfirst),conf_tails(Bpost,1/N,0.95,"higher")), col=c("blue","red", "red","darkgreen"), lty=c(1,2,2,3), lwd=c(2, 1, 1,1))
print(conf_tails(Bpost,1/N,0.95,"higher"))
Betapar <- function(mean, var) {
shape1 <- ((1 - mean) / var - 1 / mean) * mean ^ 2
shape2 <- shape1 * (1 / mean - 1)
return(c(shape1,shape2))
}
PartFunc <- function(x,delta){
return(sum(x*1/10000))
}
conf_tails <- function(x,delta,c,tail) {
if(tail=="lower"){
p <- 0
j <- 0
val <- 0
val <- 0
Z = sum(x*delta)
for (i in x){
p <- p+i*delta/Z
if (p>=(1-c)){
val <- j
break
}
j <- j+1
}
}
else if(tail=="higher"){
p <- 0
j <- 0
val <- 0
val <- 0
Z = sum(x*delta)
for (i in x){
p <- p+i*delta/Z
if (p>=c){
val <- j
break
}
j <- j+1
}
}
return(val*delta)
}
N <- 10000
prob <- seq(from =0.1, to =N, by=1)/N
n <- 75
r <- 6
fe <- r/n
beta_mean <- 0.15
beta_std <- 0.14
Bprior <- dbeta(prob, shape1 = Betapar(beta_mean,beta_std*beta_std)[1], shape2 = Betapar(beta_mean,beta_std*beta_std)[2])
like <- dbinom(x=r, size=n, prob)
Zb <- PartFunc(like*Bprior, 1/N)
Bpost <- like*Bprior/Zb
Bfirst <- sum(prob*Bpost*1/N)
Bsecond <- sum(prob*prob*Bpost*1/N)
plot(prob,Bpost,col="black",type="l",lwd=2 ,lty=1, xlim=c(0,0.5),xlab = "Probability",ylab = "Probability Density")
lines(prob,Bprior,col="orange",type="l",lwd=1 ,lty=1)
abline(v=c(Bfirst,Bfirst-sqrt(Bsecond-Bfirst*Bfirst),Bfirst+sqrt(Bsecond-Bfirst*Bfirst),conf_tails(Bpost,1/N,0.95,"higher")), col=c("blue","red", "red","darkgreen"), lty=c(1,2,2,3), lwd=c(2, 1, 1,1))
print(conf_tails(Bpost,1/N,0.95,"higher"))
